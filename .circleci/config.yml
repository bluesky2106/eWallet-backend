version: 2 # use CircleCI 2.0
jobs: # basic units of work in a run
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
      # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/
      - image: circleci/golang:1.14

      # CircleCI redis images available at: https://hub.docker.com/r/circleci/redis/tags
      - image: circleci/redis
        port: 6379:6379 

      - image: circleci/mysql:5.7
        port: 3306:3306
        environment: # environment variables for primary container
          - MYSQL_ALLOW_EMPTY_PASSWORD=true
          - MYSQL_ROOT_HOST=%
          - MYSQL_USER=itv
          - MYSQL_PASSWORD=itv
          - MYSQL_ROOT_PASSWORD=itv
          - MYSQL_DATABASE=itv_test
      
      - image: rabbitmq:3.8.2-management
        hostname: app-rabbitmq
        ports:
          - 5672:5672
          - 15672:15672
        environment:
          # RABBITMQ_ERLANG_COOKIE: 6085e2412b6fa88647466c6a81c0cea0
          RABBITMQ_DEFAULT_USER: rabbitmq
          RABBITMQ_DEFAULT_PASS: rabbitmq

    # resource_class: medium
    working_directory: /go/src/github.com/bluesky2106/eWallet-backend

    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory

      # Load packages from cache (/go/pkg/mod)
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
    
      - run: GO111MODULE="on" go mod tidy

      # Store cache in the /go/pkg/mod directory
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for redis
          command: dockerize -wait tcp://localhost:6379 -timeout 1m
      - run:
          name: Wait for mysql
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          name: Install MySQL CLI
          command: |
            sudo apt-get install default-mysql-client --allow-unauthenticated
      - run:
          name: Create Database
          command: |
            mysql  -h 127.0.0.1 -u root --password=itv -e "create database itv_bo;"
            mysql  -h 127.0.0.1 -u root --password=itv -e "create database itv_pos;"

      - run:
          name: Start bo-store server
          command: make start-bo-store
          background: true # keep service running and proceed to next step
      - run:
          name: Wait for bo-store server
          command: dockerize -wait tcp://localhost:7001 -timeout 1m

      - run:
          name: Start bo server
          command: make start-bo
          background: true # keep service running and proceed to next step
      - run:
          name: Wait for bo server
          command: dockerize -wait tcp://localhost:7000 -timeout 1m

      - run:
          name: Run integration test
          command: make integration-test
        
      - run:
          name: Run unit tests
          command: make test

workflows:
  version: 2
  build_and_test:
    jobs:
      - build